@page "/productList"
@using Restaurant_System.Shared
@using System.Text
@using System.Text.Json
@inject HttpClient Http
<PageTitle>Product</PageTitle>

<h3>ProductList</h3>
@if (products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Product Name</th>
                <th>Actual Number</th>
                <th>Required Number</th>
                <th>Unit</th>
                <th>Action</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr @key="@product.ProductName">
                    <td>@product.ProductName</td>
                    <td>@product.ActualNumber</td>
                    <td>@product.RequiredNumber</td>
                    <td>@product.Unit</td>
                    <td><button class="btn btn-primary" @onclick="() => DeleteProduct(product)">Delete</button></td>
                    <td><button class="btn btn-primary" @onclick="EditProduct">Edit</button></td>
                </tr>
            }
        </tbody>
    </table>
    
}


@code {
    private List<ProductSh> products;

    protected override async Task OnInitializedAsync()
    {
        products = await Http.GetFromJsonAsync<List<ProductSh>>("ProductList");
    }
    public async Task DeleteProduct(ProductSh product)
    {
        HttpRequestMessage request = new HttpRequestMessage
            {
                Content = new StringContent(JsonSerializer.Serialize(product), Encoding.UTF8, "application/json"),
                Method = HttpMethod.Delete,
                RequestUri = new Uri("https://localhost:7139/ProductList")
            };

        HttpResponseMessage response = await Http.SendAsync(request);
        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            products = products.Where(u => u != product).ToList();
        }
    }
    public async Task EditProduct()
    {
       
    }

}
